import { Category } from '../enums/category.enum';
import { InventoryStatus } from '../enums/inventory-status.enum';

/**
 * Product Model - TypeScript equivalent of Python ProductModel
 * Matches the FastAPI backend product structure with camelCase fields
 */
export interface Product {
  /** Product ID (auto-generated by backend) */
  id?: number;
  
  /** Unique product code (format: f230fh0g3) */
  code: string;
  
  /** Product name (unique constraint) */
  name: string;
  
  /** Product description */
  description: string;
  
  /** Product image URL (optional) */
  image?: string | null;
  
  /** Product category */
  category: Category;
  
  /** Product price (minimum 0) */
  price: number;
  
  /** Product quantity in stock (minimum 0) */
  quantity: number;
  
  /** Internal reference code (format: REF-123-456) */
  internalReference: string;
  
  /** Shell ID */
  shellId: number;
  
  /** Inventory status */
  inventoryStatus: InventoryStatus;
  
  /** Product rating (0-5 scale, optional) */
  rating?: number | null;
  
  /** Creation timestamp */
  createdAt: string;
  
  /** Last update timestamp */
  updatedAt: string;
}

/**
 * Product Create Request - For creating new products
 * Excludes auto-generated fields (id, timestamps, codes if not provided)
 */
export interface ProductCreateRequest {
  /** Product name (unique constraint) */
  name: string;
  
  /** Product description */
  description: string;
  
  /** Product image URL (optional) */
  image?: string | null;
  
  /** Product category */
  category: Category;
  
  /** Product price (minimum 0) */
  price: number;
  
  /** Product quantity in stock (minimum 0) */
  quantity: number;
  
  /** Shell ID */
  shellId: number;
  
  /** Inventory status */
  inventoryStatus: InventoryStatus;
  
  /** Product rating (0-5 scale, optional) */
  rating?: number | null;
  
  /** Custom product code (optional, auto-generated if not provided) */
  code?: string;
  
  /** Custom internal reference (optional, auto-generated if not provided) */
  internalReference?: string;
}

/**
 * Product Update Request - For updating existing products
 * All fields optional except those that cannot be null
 */
export interface ProductUpdateRequest {
  /** Product name (unique constraint) */
  name?: string;
  
  /** Product description */
  description?: string;
  
  /** Product image URL (optional) */
  image?: string | null;
  
  /** Product category */
  category?: Category;
  
  /** Product price (minimum 0) */
  price?: number;
  
  /** Product quantity in stock (minimum 0) */
  quantity?: number;
  
  /** Shell ID */
  shellId?: number;
  
  /** Inventory status */
  inventoryStatus?: InventoryStatus;
  
  /** Product rating (0-5 scale, optional) */
  rating?: number | null;
}

/**
 * Product Inventory Update - For updating only inventory-related fields
 */
export interface ProductInventoryUpdate {
  /** Inventory status */
  inventoryStatus: InventoryStatus;
  
  /** Product quantity in stock (minimum 0) */
  quantity: number;
}

/**
 * Product Query Parameters - For filtering and pagination
 */
export interface ProductQueryParams {
  /** Page number (1-based) */
  page?: number;
  
  /** Number of items per page */
  limit?: number;
  
  /** Skip number of items */
  skip?: number;
  
  /** Filter by category */
  category?: Category;
  
  /** Filter by inventory status */
  inventoryStatus?: InventoryStatus;
  
  /** Search in name and description */
  search?: string;
  
  /** Sort field */
  sortBy?: 'name' | 'price' | 'quantity' | 'createdAt' | 'updatedAt';
  
  /** Sort direction */
  sortOrder?: 'asc' | 'desc';
  
  /** Minimum price filter */
  priceMin?: number;
  
  /** Maximum price filter */
  priceMax?: number;
}

/**
 * Product List Response - Paginated product list
 */
export interface ProductListResponse {
  /** Array of products */
  products: Product[];
  
  /** Total number of products */
  total: number;
  
  /** Current page */
  page: number;
  
  /** Items per page */
  limit: number;
  
  /** Total number of pages */
  totalPages: number;
  
  /** Whether there are more pages */
  hasNext: boolean;
  
  /** Whether there are previous pages */
  hasPrev: boolean;
}

/**
 * Bulk Product Create Request - For bulk import
 */
export interface BulkProductCreateRequest {
  /** Array of products to create */
  products: ProductCreateRequest[];
}

/**
 * Product validation helpers
 */
export class ProductValidation {
  static isValidPrice(price: number): boolean {
    return price >= 0;
  }
  
  static isValidQuantity(quantity: number): boolean {
    return quantity >= 0 && Number.isInteger(quantity);
  }
  
  static isValidRating(rating: number | null | undefined): boolean {
    if (rating === null || rating === undefined) return true;
    return rating >= 0 && rating <= 5;
  }
  
  static isValidProductCode(code: string): boolean {
    // Format: f230fh0g3 (9 lowercase letters and digits)
    return /^[a-z0-9]{9}$/.test(code);
  }
  
  static isValidInternalReference(reference: string): boolean {
    // Format: REF-123-456 (REF followed by two 3-digit numbers)
    return /^REF-\d{3}-\d{3}$/.test(reference);
  }
}

/**
 * Product utility functions
 */
export class ProductUtils {
  static formatPrice(price: number): string {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(price);
  }
  
  static getInventoryStatusColor(status: InventoryStatus): string {
    const colors = {
      [InventoryStatus.INSTOCK]: '#4CAF50',
      [InventoryStatus.LOWSTOCK]: '#FF9800',
      [InventoryStatus.OUTOFSTOCK]: '#F44336'
    };
    return colors[status];
  }
  
  static isLowStock(product: Product): boolean {
    return product.inventoryStatus === InventoryStatus.LOWSTOCK || 
           (product.inventoryStatus === InventoryStatus.INSTOCK && product.quantity <= 10);
  }
  
  static isOutOfStock(product: Product): boolean {
    return product.inventoryStatus === InventoryStatus.OUTOFSTOCK || product.quantity === 0;
  }
  
  static formatRating(rating: number | null | undefined): string {
    if (rating === null || rating === undefined) return 'No rating';
    return `${rating.toFixed(1)} / 5.0`;
  }
}
